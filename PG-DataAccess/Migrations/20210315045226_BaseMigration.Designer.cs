// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using PG_DataAccess.Data;

namespace PG_DataAccess.Migrations
{
    [DbContext(typeof(PgDbContext))]
    [Migration("20210315045226_BaseMigration")]
    partial class BaseMigration
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("PG_DataAccess.Models.PaymentRequest", b =>
                {
                    b.Property<Guid>("paymentId")
                        .HasColumnName("id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("amount")
                        .HasColumnName("amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("cardHolder")
                        .IsRequired()
                        .HasColumnName("card_holder")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("cardNumberMasked")
                        .IsRequired()
                        .HasColumnName("card_number")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("currency")
                        .IsRequired()
                        .HasColumnName("currency")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("dateCreated")
                        .HasColumnName("date_created")
                        .HasColumnType("datetime2");

                    b.Property<string>("expiryDate")
                        .IsRequired()
                        .HasColumnName("card_expiry_date")
                        .HasColumnType("varchar(100)");

                    b.Property<bool>("paymentSuccessful")
                        .HasColumnName("payment_successful")
                        .HasColumnType("bit");

                    b.HasKey("paymentId");

                    b.ToTable("paymentRequests");

                    b.HasData(
                        new
                        {
                            paymentId = new Guid("3c7dea5c-fa0c-4584-b248-fd941368cea6"),
                            amount = 100.00m,
                            cardHolder = "c/y3K1Bsn7e8d2mQcBGvUmGB/o43tflopzgJejcktxLZR4qPZ8Z6pN5hW/x+9DVM",
                            cardNumberMasked = "DSMpzXhEt3kxEWcymd7EJUeFXsVTFbu5eEmuS/NwZY+Ey0BwGPDWuwCm/A9oBVMy",
                            currency = "GBP",
                            dateCreated = new DateTime(2021, 3, 15, 4, 52, 26, 244, DateTimeKind.Utc).AddTicks(48),
                            expiryDate = "pASEMVGtOT/IelZVaTNbS7Z3XlyXfg4Sd4JLkN5vTNc=",
                            paymentSuccessful = true
                        },
                        new
                        {
                            paymentId = new Guid("d2e52fea-98ad-4578-a418-ce117f78f45d"),
                            amount = 249.99m,
                            cardHolder = "0kD2E8MGJs7LEENwYH3DB4F3gsyGt8F1ddfr6lEN/M9OrgWKjxW2KIZKsr/VJMgV",
                            cardNumberMasked = "XuoavkQyp5TAuaeCir1xwDkx8QfrvPdxNLtjPcF6iUROjxYBjSlX96gwyNlNiwtO",
                            currency = "USD",
                            dateCreated = new DateTime(2021, 3, 15, 4, 52, 26, 245, DateTimeKind.Utc).AddTicks(6495),
                            expiryDate = "bqZY4oeLiIhVfETgSZkHgOs77+6JRNvEkQf1MqQg2Dc=",
                            paymentSuccessful = false
                        });
                });
#pragma warning restore 612, 618
        }
    }
}
