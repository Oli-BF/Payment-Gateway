// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using PG_DataAccess.Data;

namespace PG_DataAccess.Migrations
{
    [DbContext(typeof(PgDbContext))]
    partial class PgDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("PG_DataAccess.Models.PaymentRequest", b =>
                {
                    b.Property<int>("paymentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("cardHolder")
                        .IsRequired()
                        .HasColumnType("varchar(8000)");

                    b.Property<string>("cardNumberMasked")
                        .IsRequired()
                        .HasColumnType("varchar(8000)");

                    b.Property<string>("currency")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("dateCreated")
                        .HasColumnType("datetime2");

                    b.Property<string>("expiryDate")
                        .IsRequired()
                        .HasColumnType("varchar(8000)");

                    b.Property<bool>("paymentSuccessful")
                        .HasColumnType("bit");

                    b.HasKey("paymentId");

                    b.ToTable("paymentRequests");

                    b.HasData(
                        new
                        {
                            paymentId = 1,
                            amount = 100.00m,
                            cardHolder = "m3x7enKi30CiT65R41fH+taXnXiu67EIu84HXFm0pU7UuWKHYpsV+GOs0gDqaVZn",
                            cardNumberMasked = "8jQxK5V+oSSe/9MDJNpd3jG+jt0lvur6X/+m86sKwXtpB6D3h9OqXON6bh97+UsB",
                            currency = "GBP",
                            dateCreated = new DateTime(2021, 3, 14, 0, 46, 21, 785, DateTimeKind.Utc).AddTicks(8272),
                            expiryDate = "UMVlVjtueb1+UNyclRSMs8qK5xovZX8SnhQ/Fl94E8U=",
                            paymentSuccessful = true
                        },
                        new
                        {
                            paymentId = 2,
                            amount = 250.00m,
                            cardHolder = "ORUpqDkW2L8vkcTL+qgl3QH8qMQ5RVpq9yhXr1KF1EWRcalgFh3UYl9PwfI/x+wD",
                            cardNumberMasked = "70rmOLl6D/EgdPQjLp4UgnpdeIzvCoQ0q5rGGUKzAnApiveo8z5ea0B1wTiy2QPn",
                            currency = "GBP",
                            dateCreated = new DateTime(2021, 3, 14, 0, 46, 21, 787, DateTimeKind.Utc).AddTicks(2912),
                            expiryDate = "wJ1UOefWcFvNtGpxY/4A+WGuOMsk6Bw9GtVxUfcso8s=",
                            paymentSuccessful = true
                        });
                });
#pragma warning restore 612, 618
        }
    }
}
