// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using PG_DataAccess.Data;

namespace PG_DataAccess.Migrations
{
    [DbContext(typeof(PgDbContext))]
    partial class PgDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("PG_DataAccess.Models.PaymentRequest", b =>
                {
                    b.Property<Guid>("paymentId")
                        .HasColumnName("id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("amount")
                        .HasColumnName("amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("cardHolder")
                        .IsRequired()
                        .HasColumnName("card_holder")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("cardNumberMasked")
                        .IsRequired()
                        .HasColumnName("card_number")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("currency")
                        .IsRequired()
                        .HasColumnName("currency")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("dateCreated")
                        .HasColumnName("date_created")
                        .HasColumnType("datetime2");

                    b.Property<string>("expiryDate")
                        .IsRequired()
                        .HasColumnName("card_expiry_date")
                        .HasColumnType("varchar(100)");

                    b.Property<bool>("paymentSuccessful")
                        .HasColumnName("payment_successful")
                        .HasColumnType("bit");

                    b.HasKey("paymentId");

                    b.ToTable("paymentRequests");

                    b.HasData(
                        new
                        {
                            paymentId = new Guid("3c7dea5c-fa0c-4584-b248-fd941368cea6"),
                            amount = 100.00m,
                            cardHolder = "HHoKFGl9oFn57RDApSjSDhvVT3QfN82v9CtLU+W/vR8tfo03/qH6Zwi8P+8+16BH",
                            cardNumberMasked = "kM8wFw2SX8caSMyFscTM+F7y9SSwEsEdSF0fgjzzcVUpyM6ZZKQVYyFWUuhJVamy",
                            currency = "GBP",
                            dateCreated = new DateTime(2021, 3, 15, 4, 52, 26, 244, DateTimeKind.Utc).AddTicks(48),
                            expiryDate = "wZFOKQb/ORpOm/q8ZDa1Vf4niNYuDDt34wfQ0zh+hPE=",
                            paymentSuccessful = true
                        },
                        new
                        {
                            paymentId = new Guid("d2e52fea-98ad-4578-a418-ce117f78f45d"),
                            amount = 249.99m,
                            cardHolder = "mYLpvRJXnB1xOqdudu5kr2FQ6JgHxX2bQgTf3jnxwD8k4VxSA/h80fuwIhObzHO7",
                            cardNumberMasked = "vVznh69B01VUFpteSmGiL+vhAj+EcgWDZuwek3/2jOcLbw66+g5xjkwRiWYtNrsa",
                            currency = "USD",
                            dateCreated = new DateTime(2021, 3, 15, 4, 52, 26, 245, DateTimeKind.Utc).AddTicks(6495),
                            expiryDate = "mLSjcV9xVBxtsBrcUt/yP/klDlPhrJLgg8mJuglroe4=",
                            paymentSuccessful = false
                        });
                });
#pragma warning restore 612, 618
        }
    }
}
